#summary AiBridge - Z> Nightly Build

= Introduction =

This page includes updates / enhancements to AiBridge, based on latest AiBridge version, currently v1.0.1. Some time in future, the nightly will be released as an official version.

To download this nightly, use Downloads link or here: http://code.google.com/p/apptomarket/downloads/detail?name=AiBridgeNightly.jar

= Details =

1. YailList (basically an ArrayList) can now be sorted in unsorted or sorted order. This is useful when you when you want to display sorted items in a ListPicker; e.g.
<code>
   //create a string array for test purpose
   String[] items = new String[]{"b", "c", "a"};

   // create un-sorted list
   YailList yailListUnsorted= YailList.makeList(items);

   // create sorted list
   YailList yailListSorted= YailList.makeList(items, true);

   //now, add the items to a ListPicker, and display the sorted items
   myListPicker.Elements(yailListSorted);
   myListPicker.open();

   //For debug purpose, display sun-sorted, sorted results in notifier
   notifier.ShowMessageDialog("Unsorted\n" + yailListUnsorted + "\n\nSorted\n" + yailListSorted, 
                "unsorted vs sorted", 
                "Okay");
</code> 

2. You can now control the screen to stay ON or OFF for your app
. Usage example is when you develop GPS / Navigation apps and you want to avoid screen from turning off.
<code>
   //keep screen on while this application is running
   setKeepScreenOn(true);
</code>

3. Now, you can create a list that includes Checkboxes OR Radiobuttons. Setup and initialization is pretty much like usual ListPicker. See code below to see example. Here is how listpickers look like: <br >[http://www.3nportal.com/wikiImages/listPicker.jpg]
<code>
package com.example3;
import com.google.devtools.simple.runtime.components.Component;
import com.google.devtools.simple.runtime.components.HandlesEventDispatching;
import com.google.devtools.simple.runtime.components.android.Form;
import com.google.devtools.simple.runtime.components.android.ListPickerCheckbox;
import com.google.devtools.simple.runtime.components.android.TextBox;
import com.google.devtools.simple.runtime.components.util.YailList;
import com.google.devtools.simple.runtime.events.EventDispatcher;

import java.util.Arrays;


public class ListPickerCbRbActivity extends Form implements HandlesEventDispatching {

    //Declare 2 ListPickerCheckbox, one for checkbox, the other for radio button examples
    //These are like buttons
    ListPickerCheckbox listPickerCheckboxMulti;
    ListPickerCheckbox listPickerCheckboxRb;

    //A textbox used for debug purpose
    TextBox txtResults;

    //create the layout
    void $define() {
        
        //init visual components
        listPickerCheckboxMulti = new ListPickerCheckbox(this);
        listPickerCheckboxRb = new ListPickerCheckbox(this);

        //Setup the text to display in the listpicker buttons
        listPickerCheckboxMulti.Text("Click to open the checkboxes style");
        listPickerCheckboxRb.Text("Click to open the radio button style");

        //Load some default values to display in the listpicker
        String[] strArray = {"item1", "item2", "item3"};
        YailList yailList = YailList.makeList(strArray);

        //Set the above items into our sample listpickers. We are setting same items into 
        //both of our listpickers
        listPickerCheckboxMulti.Elements(yailList);
        listPickerCheckboxRb.Elements(yailList);

        //Use SelectionStlye to specify if we want multi (checkbox) or single (radtio button)
        listPickerCheckboxMulti.SelectionStlye(Component.MULTIPLE_CHOICE);
        listPickerCheckboxRb.SelectionStlye(Component.SINGLE_CHOICE);

        //for debug purpose, we display results from our listpicker in this text box
        txtResults = new TextBox(this, "Results display here", Component.LENGTH_FILL_PARENT);
        
        //hide our softkeyboard
        hideSoftKeyboard();

        //register for these events
        EventDispatcher.registerEventForDelegation(this, "test", "Click");
        EventDispatcher.registerEventForDelegation(this, "test", "AfterPicking");
    }

    @Override
    public boolean dispatchEvent(Component component, String id, String eventName, Object[] args) {

        if (eventName.equals("Click")) {
            //A visual component was clicked
            if (component.equals(listPickerCheckboxMulti)) {
                //we want to open listpicker in checkbox style
                listPickerCheckboxMulti.Open();
                return true;
            } else if (component.equals(listPickerCheckboxRb)) {
                //we want to open listpicker in radiobutton style
                listPickerCheckboxRb.Open();
                return true;
            }

            return false;

        } else if (eventName.equals("AfterPicking") && component.equals(listPickerCheckboxMulti)) {
            //display results in our text box
            txtResults.Text( Arrays.toString(listPickerCheckboxMulti.Selections()));
        }

        return false;
    }
}
</code>